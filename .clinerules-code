# 爬虫项目专属规则 (Code Mode)

项目初始化规范：使用 uv 作为安装工具
1. 依赖管理：
   - 使用 pyproject.toml 作为主要依赖管理文件：
     ```toml
     [project]
     name = "kms"
     requires-python = ">=3.11"
     dependencies = [
         "scrapy>=2.11.0",         # 爬虫框架
         "beautifulsoup4>=4.12.3", # HTML解析
         "pydantic>=2.7.0",        # 数据验证
         "playwright>=1.41.2",     # 浏览器自动化
     ]

     [project.optional-dependencies]
     dev = [
         "pytest>=7.0.0",
         "black>=23.0.0",
         "isort>=5.0.0",
         "flake8>=6.0.0"
     ]
     ```

2. 目录结构约束：
   ```python
   # 必须包含的目录结构
   ├── crawler/              # 爬虫核心模块
   │   ├── core/            # 爬虫核心逻辑
   │   │   ├── auth.py      # 认证相关
   │   │   ├── config.py    # 配置管理
   │   │   ├── content.py   # 内容处理
   │   │   ├── spider.py    # 爬虫实现
   │   │   └── ...
   │   └── test/           # 测试用例
   │       ├── kms-demo.py
   │       └── settings.py
   ├── dify/               # Dify 集成模块
   │   ├── api/           # API 客户端
   │   ├── core/          # 核心功能
   │   ├── examples/      # 使用示例
   │   └── utils/         # 工具函数
   ├── pyproject.toml     # 项目依赖配置
   └── CHANGELOG.md       # 变更日志
   ```

3. 变更日志管理规范：
   1. 每次功能变更时自动生成：
      - 识别代码变更中的核心功能点
      - 按语义化版本规范归类变更类型(feat/fix/chore)
      - 用 Markdown 格式追加到 CHANGELOG.md 的 Unreleased 章节
      - 示例格式：
        ```markdown
        ## [Unreleased]
        ### Added
        - 新增用户身份验证端点 @{iso8601-date}
        ```

   2. 提交时触发校验：
      - 检查是否包含有效的 changelog 更新
      - 未更新时生成警告并提供自动补全建议

4. 代码风格规范：
   - 使用 black 进行代码格式化（line-length = 100）
   - 使用 isort 进行导入排序（profile = black）
   - 使用 flake8 进行代码质量检查
